<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

       <!-- 权限缓存管理器-->
    <bean id="shiroCacheManager" class="com.lzy.block.core.ehcache.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean> 
     
   <!--   可以单独创建个shiro-cache文件
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		 <property name="cacheManagerConfigFile" value="classpath:cache/ehcache-shiro.xml"/>
	</bean>
 -->
    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.lzy.block.core.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroCacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 
    	没使用缓存
    -->
    <bean id="userRealm" class="com.lzy.block.core.shiro.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <!--<property name="authenticationCachingEnabled" value="true"/>-->
        <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
        <!--<property name="authorizationCachingEnabled" value="true"/>-->
        <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

	<!-- 记住我cookie模板 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 -->
    <!-- 
    	使用shiro-quartz貌似会与quartzjar包有冲突，改用shiro默认的
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
       <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
     -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="1800000"/><!-- 单位毫秒，默认就是1 小时； -->
        <property name="sessionManager" ref="sessionManager"/> 
    </bean> 

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

	<!-- 用于根据当前登录用户身份获取User信息放入request；然后就可以通过request获取User。 -->
    <bean id="sysUserFilter" class="com.lzy.block.console.filters.shiro.SysUserFilter">
    	 <constructor-arg ref="shiroCacheManager"/>
    </bean>
    
    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="authcFilter" class="com.lzy.block.console.filters.shiro.MyFormAuthenticationFilter">
        <!-- <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/> -->
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>
        <property name="loginUrl" value="/login"/> <!-- 登录地址 -->
    </bean>
    
    <!-- 验证码过滤 -->
    <bean id="jCaptchaValidateFilter" class="com.lzy.block.console.filters.shiro.jcaptcha.JCaptchaValidateFilter">
        <property name="jcaptchaEbabled" value="true"/>
        <property name="jcaptchaParam" value="jcaptchaCode"/>
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>
    </bean>
    
    <!-- 强制退出拦截 -->
    <bean id="forceLogoutFilter" class="com.lzy.block.console.filters.shiro.ForceLogoutFilter"/>

	<!-- 相同账号登录人数控制 -->
	<bean id="kickoutSessionControlFilter" class="com.lzy.block.console.filters.shiro.KickoutSessionControlFilter">
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="kickoutAfter" value="true"/> <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 -->
        <property name="maxSession" value="1"/>  <!-- 同一个用户最大的会话数，默认1；比如2 的意思是同一个用户允许最多同时两个人登录； -->
        <property name="kickoutUrl" value="/login?kickout=1"/> <!-- 被踢出后重定向到的地址； -->
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="authcFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/> 
                <entry key="jCaptchaValidate" value-ref="jCaptchaValidateFilter"/>
                <entry key="forceLogout" value-ref="forceLogoutFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
            	/**/*.jsp=anon
            	/common/**=anon
            	/test/**=anon
            	/token/**=anon
            	/front/**=anon
                /activiti/** = anon
                /resources/** = anon
                /frame/** = anon
                /jcaptcha* = anon 				<!-- anno是默认拦截器，不需要登录即可访问，用于静态文件 -->
                /login = jCaptchaValidate,authc  <!-- authc 里面保存了登录前要跳转的地址 -->
                /logout = logout		 <!-- logout是shiro默认的拦截器,会将保持在浏览器端的rememberMe cookie删掉 -->
                /authenticated = authc   <!-- authc拦截器表示需要身份认证通过后才能访问，记住我功能的用户，没有登录，因此没有通过身份验证 -->
 		        /** = kickout,forceLogout,user   <!-- user是shiro默认的一种拦截器，里面允许记住我用户，以及登录验证后的用户通过 --> 
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<aop:config proxy-target-class="true"></aop:config>	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>